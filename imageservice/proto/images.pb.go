// Code generated by protoc-gen-go.
// source: images.proto
// DO NOT EDIT!

/*
Package images is a generated protocol buffer package.

It is generated from these files:
	images.proto

It has these top-level messages:
	ImageData
	ImageChoice
	Image
	ImageList
	StatusResponse
	ItemName
*/
package images

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImageData struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Caption string `protobuf:"bytes,2,opt,name=caption" json:"caption,omitempty"`
	Image   []byte `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *ImageData) Reset()                    { *m = ImageData{} }
func (m *ImageData) String() string            { return proto.CompactTextString(m) }
func (*ImageData) ProtoMessage()               {}
func (*ImageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ImageChoice struct {
	Name  string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Index int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
}

func (m *ImageChoice) Reset()                    { *m = ImageChoice{} }
func (m *ImageChoice) String() string            { return proto.CompactTextString(m) }
func (*ImageChoice) ProtoMessage()               {}
func (*ImageChoice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Image struct {
	Uri     string `protobuf:"bytes,6,opt,name=uri" json:"uri,omitempty"`
	Caption string `protobuf:"bytes,7,opt,name=caption" json:"caption,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ImageList struct {
	Name   string   `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	Images []*Image `protobuf:"bytes,9,rep,name=images" json:"images,omitempty"`
	Cover  int32    `protobuf:"varint,10,opt,name=cover" json:"cover,omitempty"`
}

func (m *ImageList) Reset()                    { *m = ImageList{} }
func (m *ImageList) String() string            { return proto.CompactTextString(m) }
func (*ImageList) ProtoMessage()               {}
func (*ImageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ImageList) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type StatusResponse struct {
	Message string `protobuf:"bytes,11,opt,name=message" json:"message,omitempty"`
	Success bool   `protobuf:"varint,12,opt,name=success" json:"success,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ItemName struct {
	Name string `protobuf:"bytes,13,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *ItemName) Reset()                    { *m = ItemName{} }
func (m *ItemName) String() string            { return proto.CompactTextString(m) }
func (*ItemName) ProtoMessage()               {}
func (*ItemName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*ImageData)(nil), "ImageData")
	proto.RegisterType((*ImageChoice)(nil), "ImageChoice")
	proto.RegisterType((*Image)(nil), "Image")
	proto.RegisterType((*ImageList)(nil), "ImageList")
	proto.RegisterType((*StatusResponse)(nil), "StatusResponse")
	proto.RegisterType((*ItemName)(nil), "ItemName")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ImageStorer service

type ImageStorerClient interface {
	StoreImage(ctx context.Context, in *ImageData, opts ...client.CallOption) (*StatusResponse, error)
	ChooseCover(ctx context.Context, in *ImageChoice, opts ...client.CallOption) (*StatusResponse, error)
	RemoveImage(ctx context.Context, in *ImageChoice, opts ...client.CallOption) (*StatusResponse, error)
	ImagesFor(ctx context.Context, in *ItemName, opts ...client.CallOption) (*ImageList, error)
}

type imageStorerClient struct {
	c           client.Client
	serviceName string
}

func NewImageStorerClient(serviceName string, c client.Client) ImageStorerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "imagestorer"
	}
	return &imageStorerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *imageStorerClient) StoreImage(ctx context.Context, in *ImageData, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ImageStorer.StoreImage", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageStorerClient) ChooseCover(ctx context.Context, in *ImageChoice, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ImageStorer.ChooseCover", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageStorerClient) RemoveImage(ctx context.Context, in *ImageChoice, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ImageStorer.RemoveImage", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageStorerClient) ImagesFor(ctx context.Context, in *ItemName, opts ...client.CallOption) (*ImageList, error) {
	req := c.c.NewRequest(c.serviceName, "ImageStorer.ImagesFor", in)
	out := new(ImageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImageStorer service

type ImageStorerHandler interface {
	StoreImage(context.Context, *ImageData, *StatusResponse) error
	ChooseCover(context.Context, *ImageChoice, *StatusResponse) error
	RemoveImage(context.Context, *ImageChoice, *StatusResponse) error
	ImagesFor(context.Context, *ItemName, *ImageList) error
}

func RegisterImageStorerHandler(s server.Server, hdlr ImageStorerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ImageStorer{hdlr}, opts...))
}

type ImageStorer struct {
	ImageStorerHandler
}

func (h *ImageStorer) StoreImage(ctx context.Context, in *ImageData, out *StatusResponse) error {
	return h.ImageStorerHandler.StoreImage(ctx, in, out)
}

func (h *ImageStorer) ChooseCover(ctx context.Context, in *ImageChoice, out *StatusResponse) error {
	return h.ImageStorerHandler.ChooseCover(ctx, in, out)
}

func (h *ImageStorer) RemoveImage(ctx context.Context, in *ImageChoice, out *StatusResponse) error {
	return h.ImageStorerHandler.RemoveImage(ctx, in, out)
}

func (h *ImageStorer) ImagesFor(ctx context.Context, in *ItemName, out *ImageList) error {
	return h.ImageStorerHandler.ImagesFor(ctx, in, out)
}

func init() { proto.RegisterFile("images.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4e, 0xeb, 0x30,
	0x10, 0xc6, 0xdb, 0xd7, 0x26, 0x6d, 0x26, 0x79, 0x80, 0x2c, 0x16, 0x56, 0x17, 0x55, 0x65, 0xb1,
	0xa8, 0x84, 0xe4, 0x45, 0xbb, 0xe0, 0x00, 0xad, 0x90, 0x2a, 0x21, 0x90, 0x5c, 0x71, 0x00, 0x13,
	0x2c, 0xc8, 0x22, 0x71, 0x65, 0x3b, 0x88, 0xe3, 0x71, 0x34, 0xfc, 0x2f, 0x21, 0x5d, 0x20, 0x56,
	0x99, 0x6f, 0x3c, 0x33, 0xfe, 0xcd, 0x17, 0x43, 0x51, 0xd5, 0xfc, 0x4d, 0x68, 0x7a, 0x52, 0xd2,
	0x48, 0xf2, 0x04, 0xd9, 0xc1, 0xe9, 0x3d, 0x37, 0x1c, 0x21, 0x98, 0x36, 0xbc, 0x16, 0x78, 0xbc,
	0x1a, 0xaf, 0x33, 0xe6, 0x63, 0x84, 0x61, 0x56, 0xf2, 0x93, 0xa9, 0x64, 0x83, 0xff, 0xf9, 0x74,
	0x27, 0xd1, 0x35, 0x24, 0x7e, 0x14, 0x9e, 0xd8, 0x7c, 0xc1, 0x82, 0x20, 0x77, 0x90, 0xfb, 0x81,
	0xbb, 0x77, 0x59, 0x95, 0xa2, 0x1f, 0x39, 0x1d, 0x8c, 0x74, 0x8d, 0xcd, 0xab, 0xf8, 0xc4, 0x89,
	0x4d, 0x26, 0x2c, 0x08, 0xb2, 0x85, 0xc4, 0x37, 0xa2, 0x2b, 0x98, 0xb4, 0xaa, 0xc2, 0xa9, 0xef,
	0x70, 0xe1, 0x90, 0x61, 0x76, 0xc6, 0x40, 0x9e, 0x23, 0xfe, 0x43, 0xa5, 0x4d, 0x7f, 0xd7, 0x7c,
	0x70, 0xd7, 0x12, 0xd2, 0xb0, 0x2f, 0xce, 0x56, 0x93, 0x75, 0xbe, 0x49, 0xa9, 0xaf, 0x67, 0x31,
	0xeb, 0x58, 0x4a, 0xf9, 0x21, 0x14, 0x86, 0xc0, 0xe2, 0x05, 0xd9, 0xc3, 0xc5, 0xd1, 0x70, 0xd3,
	0x6a, 0x26, 0xf4, 0x49, 0x36, 0xda, 0xdb, 0x50, 0x0b, 0xad, 0xdd, 0xba, 0x79, 0x40, 0x88, 0xd2,
	0x9d, 0xe8, 0xb6, 0x2c, 0xad, 0xc2, 0x85, 0x3d, 0x99, 0xb3, 0x4e, 0x92, 0x25, 0xcc, 0x0f, 0x46,
	0xd4, 0x8f, 0x8e, 0xc3, 0xb2, 0xb9, 0x2f, 0xfe, 0xff, 0xc3, 0xb6, 0xf9, 0x1a, 0x47, 0xaf, 0x8e,
	0x46, 0x2a, 0xa1, 0xd0, 0x2d, 0x80, 0x8f, 0x82, 0x0d, 0x40, 0xfb, 0x1f, 0xb3, 0xb8, 0xa4, 0xe7,
	0x38, 0x64, 0x84, 0x28, 0xe4, 0xd6, 0x62, 0xa9, 0xc5, 0xce, 0x11, 0xa3, 0x82, 0x0e, 0x5c, 0xff,
	0xa5, 0x9e, 0x89, 0xda, 0xd6, 0x86, 0xe9, 0x7f, 0xd6, 0xdf, 0x44, 0x67, 0xf5, 0xbd, 0x54, 0x28,
	0xa3, 0xdd, 0x22, 0x8b, 0x88, 0xe5, 0x0c, 0x27, 0xa3, 0x97, 0xd4, 0xbf, 0xa2, 0xed, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x1a, 0xf9, 0x2c, 0x50, 0x55, 0x02, 0x00, 0x00,
}
